<?xml version="1.0"?>
<doc>
    <assembly>
        <name>glue.lib</name>
    </assembly>
    <members>
        <member name="T:Glue.Lib.ByteString">
            <summary>
            Helper class to expose string-like functionality on top
            of a byte array. Used in parsing of HTTP requests.
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.HttpProtocol">
            <summary>
            Summary description for HttpProtocol.
            </summary>
        </member>
        <member name="T:Glue.Lib.Options.OptionConvertFlags">
            <summary>
            Summary description for OptionConvertFlags.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mail.MailMessage">
            <remarks>
            </remarks>
        </member>
        <member name="T:Glue.Lib.CombinedException">
            <summary>
            Stores multiple contained exceptions related to mapping 
            values to members of objects. See Mapper.
            </summary>
        </member>
        <member name="M:Glue.Lib.CombinedException.ToHtml">
            <summary>
            Returns a UL list of errors
            </summary>
            <returns></returns>
        </member>
        <member name="T:Glue.Lib.Base64Encoding">
            <summary>
            BinHexEncoding class.
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.HttpRequest">
            <summary>
            Summary description for HttpRequest.
            </summary>
        </member>
        <member name="T:Glue.Lib.Compilation.Settings">
            <summary>
            Compiler settings.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.Settings.GetCompilerInfoFromFileName(System.String)">
            <summary>
            Obtains compiler information based on given filename.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.Settings.#ctor">
            <summary>
            Default constructor, reads settings from machine.config in the
            .NET Framework directory.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.Settings.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor to be called from Config. Reads settings from machine.config 
            in the .NET Framework directory and overrides with custom settings defined
            in a config key.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.Debug">
            <summary>
            Include debug information in compiled assemblies.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.DefaultLanguage">
            <summary>
            Default language if none is specified.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.Explicit">
            <summary>
            Use explicit typing, when applicable (VB.NET for example).
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.KeepTempFiles">
            <summary>
            Keep temporary files used during compilation on disk. Can be
            useful for debugging purposes.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.Strict">
            <summary>
            Strict compilation.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.GenerateInMemory">
            <summary>
            Generate in-memory.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.Compilers">
            <summary>
            Individual compiler information.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.Assemblies">
            <summary>
            Assemblies to reference.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.AssembliesInBin">
            <summary>
            Reference all assemblies found in the /bin folder of the current
            application.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.Settings.Imports">
            <summary>
            Default namespaces to import.
            </summary>
        </member>
        <member name="T:Glue.Lib.Xml.Sgml.CaseFolding">
            <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="T:Glue.Lib.Xml.Sgml.HWStack">
            <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
        </member>
        <member name="T:Glue.Lib.Xml.Sgml.Attribute">
            <summary>
            This class represents an attribute.  The AttDef is assigned
            from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.Sgml.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="T:Glue.Lib.Xml.Sgml.Node">
            <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.Sgml.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="T:Glue.Lib.Xml.Sgml.SgmlReader">
            <summary>
            SgmlReader is an XmlReader API over any SGML document (including built in 
            support for HTML).  
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.Sgml.SgmlReader.SetBaseUri(System.String)">
            <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.Dtd">
            <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.DocType">
            <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.PublicIdentifier">
            <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.SystemLiteral">
            <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.InternalSubset">
            <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.InputStream">
            <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.WebProxy">
            <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.Href">
            <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.StripDocType">
            <summary>
            Whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.ErrorLog">
            <summary>
            DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.Sgml.SgmlReader.ErrorLogFile">
            <summary>
            DTD validation errors are written to this log file.
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.HtmlListItem">
            <summary>
            Helper class for enumerating lists and getting text|value combinations
            from it. Useful in constructing dropdown boxes, checkbox lists etc.
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.HtmlListEnum">
            <summary>
            Helper class for enumerating lists and getting text|value combinations
            from it. Useful in construction dropdown boxes, checkbox lists etc.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.HtmlListEnum.#ctor(System.Collections.IDictionary)">
            <summary>
            Expects params with:
            list:
              object containing items
            itemtext OR textfield:
              field on item to get text from
            itemvalue OR valuefield:
              field on item to get value from
            </summary>
            <param name="parms"></param>
        </member>
        <member name="T:Glue.Lib.Mime.MimePartCollection">
            <summary>
            Manages a collection of MimePart objects. A MimePartCollection 
            is used by the MimePart class to hold child MimePart objects. It 
            can't be used as a stand-alone object.
            </summary>
        </member>
        <member name="T:Glue.Lib.Compilation.Proxy">
            <summary>
            Helper functions to mix in members from a given class type into another class. 
            Use these when you're dynamically generating a class and want that class to have
            direct access to another object's methods and properties.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.Proxy.GenerateFields(System.CodeDom.CodeTypeMemberCollection,System.Type,System.CodeDom.CodeExpression,System.Collections.Specialized.StringCollection)">
            <summary>
            Generate proxy properties for all fields of given type and add them to the
            members collection.
            To exclude properties or even base types, use the excludes string collection.
            Target specifies how to reference the type fields from the new class, e.g. "this.FieldName", as a CodeExpression
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.Textile">
            <summary>
             Textile
             
             Glue Project: C# implementation of Textism's Textile Humane Web Text Generator
            
             Textile is Copyright (c) 2003, Dean Allen, www.textism.com, All rights reserved
             The  origional Textile can be found at http://www.textism.com/tools/textile
             
             Block modifier syntax:
             
             Header: hn.
             Paragraphs beginning with 'hn. ' (where n is 1-6) are wrapped in header tags.
             Example: <h1>Text</h1>
             
             Header with CSS class: hn(class).
             Paragraphs beginning with 'hn(class). ' receive a CSS class attribute.
             Example: <h1 class="class">Text</h1>
             
             Paragraph: p. (applied by default)
             Paragraphs beginning with 'p. ' are wrapped in paragraph tags.
             Example: <p>Text</p>
             
             Paragraph with CSS class: p(class).
             Paragraphs beginning with 'p(class). ' receive a CSS class attribute.
             Example: <p class="class">Text</p>
             
             Blockquote: bq.
             Paragraphs beginning with 'bq. ' are wrapped in block quote tags.
             Example: <blockquote>Text</blockquote>
             
             Blockquote with citation: bq(citeurl).
             Paragraphs beginning with 'bq(citeurl). ' recieve a citation attribute.
             Example: <blockquote cite="citeurl">Text</blockquote>
             
             Numeric list: #
             Consecutive paragraphs beginning with # are wrapped in ordered list tags.
             Example: <ol><li>ordered list</li></ol>
             
             Bulleted list: *
             Consecutive paragraphs beginning with * are wrapped in unordered list tags.
             Example: <ul><li>unordered list</li></ul>
             
             
             Phrase modifier syntax:
             
             _emphasis_             <em>emphasis</em>
             __italic__             <i>italic</i>
             *strong*               <strong>strong</strong>
             **bold**               <b>bold</b>
             ??citation??           <cite>citation</cite>
             -deleted text-         <del>deleted</del>
             +inserted text+        <ins>inserted</ins>
             ^superscript^          <sup>superscript</sup>
             ~subscript~            <sub>subscript</sub>
             @code@                 <code>computer code</code>
             
             ==notextile==          leave text alone (do not format)
             
             "linktext":url         <a href="url">linktext</a>
             "linktext(title)":url  <a href="url" title="title">linktext</a>
             
             !imageurl!             <img src="imageurl" />
             !imageurl(alt text)!   <img src="imageurl" alt="alt text" />
             !imageurl!:linkurl     <a href="linkurl"><img src="imageurl" /></a>
             
             ABC(Always Be Closing) <acronym title="Always Be Closing">ABC</acronym>
             
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Textile.#ctor">
            <summary>
            Public Constructor
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Textile.Process(System.String)">
            <summary>
            Process a textile formatted string
            </summary>
            <param name="content">Textile formatted content</param>
            <returns>Content converted to HTML</returns>
        </member>
        <member name="M:Glue.Lib.Text.Textile.HtmlSpecialChars(System.String,System.Int32)">
             An implementation of the PHP htmlspecialchars()
            
             @param origContent Source string
             @param mode        Mode to select replacement string for quotes
             @return String with replace occurrences
        </member>
        <member name="M:Glue.Lib.Text.Textile.SplitContent(System.Text.RegularExpressions.Regex,System.String)">
             Splits a string into a string array based on a matching regex
            
             @param matchexp Expression to match
             @param content  Content to split
             @return String array of split content
        </member>
        <member name="M:Glue.Lib.Text.Textile.ArrayReplaceAll(System.String,System.String[],System.String[])">
             Replace an array of match patterns in a string
            
             @param content  Source string
             @param matches  Match patterns
             @param replaces Replacement patterns
             @return String with replaced occurrences
        </member>
        <member name="M:Glue.Lib.Text.Textile2.#ctor">
            <summary>
            Public Constructor
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Textile2.Process(System.String)">
            <summary>
            Process a textile formatted string
            </summary>
            <param name="content">Textile formatted content</param>
            <returns>Content converted to HTML</returns>
        </member>
        <member name="M:Glue.Lib.Text.Textile2.HtmlSpecialChars(System.String,System.Int32)">
            <summary>
            An implementation of the PHP htmlspecialchars()
            </summary>
            <param name="content">Source string</param>
            <param name="mode">Mode to select replacement string for quotes</param>
            <returns>string with replace occurrences</returns>
        </member>
        <member name="M:Glue.Lib.Text.Textile2.SplitContent(System.String,System.String)">
            <summary>
            Splits a string into a string array based on a matching regex
            </summary>
            <param name="matchexp">Expression to match</param>
            <param name="content">Content to split</param>
            <returns>string array of split content</returns>
        </member>
        <member name="M:Glue.Lib.Text.Textile2.SplitContent(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Splits a string into a string array based on a matching regex
            </summary>
            <param name="pattern">Expression to match</param>
            <param name="content">Content to split</param>
            <returns>string array of split content</returns>
        </member>
        <member name="M:Glue.Lib.Text.Textile2.ArrayReplaceAll(System.String,System.String[],System.String[])">
            <summary>
            Replace an array of match patterns in a string
            </summary>
            <param name="content">Source string</param>
            <param name="matches">Match patterns</param>
            <param name="replaces">Replacement patterns</param>
            <returns>string with replaced occurrences</returns>
        </member>
        <member name="T:Glue.Lib.Text.Template.Compiler">
            <summary>
            DirectCompiler.
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.TcpConnection">
            <summary>
            Summary description for TcpConnection.
            </summary>
        </member>
        <member name="F:Glue.Lib.Servers.TcpConnection.ISO">
            <summary>
            The iso-8859-1 encoding (Western European (ISO), codepage 28591)
            is isomorph between .NET native string and a bytearray. That is,
            for each byte value 0..255 the corresponding char value in a
            string will be the same (between 0 and 255).
            
            In short:
              bytes == ISO.GetBytes(ISO.GetString(bytes));
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.TcpConnection.SendBytes(System.Byte[])">
            <summary>
            Sends data to the client
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.TcpConnection.SendBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data to the client
            </summary>
        </member>
        <member name="T:Glue.Lib.Options.OptionConvert">
            <summary>
            Summary description for OptionConverter.
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Assign(System.Object,System.String[])">
            <summary>
            Assign a NameValueCollection of arguments to an object instance.
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Assign(System.Object,System.String[],Glue.Lib.Options.OptionConvertFlags)">
            <summary>
            Assign a NameValueCollection of arguments to an object instance.
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Assign(System.Object,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Assign a NameValueCollection of arguments to an object instance.
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Assign(System.Object,System.Collections.Specialized.NameValueCollection,Glue.Lib.Options.OptionConvertFlags)">
            <summary>
            Assign a NameValueCollection of arguments to an object instance.
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Get(System.String)">
            <summary>
            Convert argument string to NameValueCollection
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Get(System.String[])">
            <summary>
            Convert argument strings to NameValueCollection
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.GetSingleValue(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Subset(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Convert argument strings to NameValueCollection
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.ToString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Convert argument strings to NameValueCollection
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.ToStringArray(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Convert argument strings to NameValueCollection
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Load(System.String)">
            <summary>
            Load arguments from file to NameValueCollection
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.Load(System.String,System.String@)">
            <summary>
            Load arguments from file to NameValueCollection, and reads
            rest of the file into rest.
            </summary>
        </member>
        <member name="M:Glue.Lib.Options.OptionConvert.GetOptionAttribute(System.Reflection.MemberInfo)">
            <summary>
            Get associated OptionAttribute for given member
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.MimePart">
            <summary>
            MimePart encapsulates a MIME message part (see RFC 1521 for details). 
            MIME messages contain a hierarchical tree of MIME parts, each carrying
            some information payload. As typical mail message looks like this:
            
                Content-Type: multipart/alternative; boundary="bound_1"
                Sample-Header-1: mime-header-value
                Sample-Header-2: mime-header-value
            
                This is a multipart mime.
                --bound_1
                    Content-Type: text/plain
                    Sample-Header: mime-header-value
                    
                    This is a message in plaintext.
                --bound_1
                    Content-Type: text/html
                    Sample-Header: mime-header-value
                    
                    <html><body>This is a HTML!</body></html>
                --bound_1--
                    
            Using MimePart.Parse will return you a tree of three MimePart objects:
              
                MimePart (mult/alt)
                  MimePart (text/plain)
                  MimePart (text/html)
                  
            You can inspect header values through the MimePart.Headers collection.
            Access and shuffle child MimeParts with the MimePart.MimeParts list.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.Parse(System.String)">
            <summary>
            Parse and initialize a MIME part from given TextReader.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.Load(System.IO.TextReader)">
            <summary>
            Parse and initialize a MIME part from given TextReader.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.Load(System.String)">
            <summary>
            Load a MIME message from a file. Counterpart of
            MimePart.Save.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.CreateFromFile(System.String)">
            <summary>
            Creates a MIME part from file. Determines ContentType,
            ContentEncoding and TransferEncoding from the extension 
            of the file.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.CreateFromFile(System.String,System.Text.Encoding)">
            <summary>
            Creates a MIME part from file. Determines ContentType,
            ContentEncoding and TransferEncoding from the extension 
            of the file.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.CreateFromFile(System.String,System.String,System.Text.Encoding,Glue.Lib.Mime.TransferEncoding)">
            <summary>
            Creates a MIME part from a file. If ContentType, ContentEncoding
            TransferEncoding are not specified (i.e. null), this function
            will guess the right values based on the filename extension.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.#ctor">
            <summary>
            Creates an empty MimePart.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.#ctor(System.String)">
            <summary>
            Creates an MimePart with given Content-Type
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.#ctor(Glue.Lib.Mime.MimePart,System.IO.TextReader,System.String@)">
            <summary>
            Private constructor used during parsing of MimePart.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.Write(System.IO.Stream)">
            <summary>
            Writes MIME message to stream.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.Insert(Glue.Lib.Mime.MimePart,Glue.Lib.Mime.MimePart)">
            <summary>
            Internal Insert method, called from MimePartCollection.Insert.
            Makes sure parent is ok.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimePart.Remove(Glue.Lib.Mime.MimePart)">
            <summary>
            Internal Remove method, called from MimePartCollection.Remove.
            Makes sure parent is ok.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.Content">
            <summary>
            The raw, transfer-encoded 7 bit ASCII message body.
            Caller must ensure this data is properly encoded
            and formatted.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.ContentType">
            <summary>
            Gets or sets Content-Type header value. Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.CharSet">
            <summary>
            Gets or sets Content-Type "charset" param value. Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.Boundary">
            <summary>
            Gets or sets Content-Type "boundary" param value. Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.Name">
            <summary>
            Gets or sets Content-Type "name" param value, Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.ContentEncoding">
            <summary>
            Gets or sets the System.Text.Encoding object based on CharSet 
            value. Will throw exception if CharSet is null or unknown.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.ContentTransferEncoding">
            <summary>
            Gets or sets Content-Transfer-Encoding header value. Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.TransferEncoding">
            <summary>
            Gets or sets TransferEncoding object based on ContentTransferEncoding
            value. Will throw exception if ContentTransferEncoding is null or 
            unknown.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.ContentID">
            <summary>
            Gets or sets Content-ID header value. Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.ContentDisposition">
            <summary>
            Gets or sets Content-Disposition header value. Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.FileName">
            <summary>
            Gets or sets Content-Disposition "filenae" param value.
            Returns null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.ContentBase">
            <summary>
            Gets or sets Content-Base header value. Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.ContentLocation">
            <summary>
            Gets or sets Content-Location header value. Returns 
            null if not set.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.Headers">
            <summary>
            Get all headers for this MIME part.
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.MimeParts">
            <summary>
            Get all child MIME parts (in case of a multipart MIME)
            </summary>
        </member>
        <member name="P:Glue.Lib.Mime.MimePart.Parent">
            <summary>
            Get parent MIME part.
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.JSON.Helper">
            <summary>
            Static helper function for JSON notation.
            </summary>
        </member>
        <member name="T:Glue.Lib.StringHelper">
            <summary>
            String helper functions.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.Split(System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Splits a string in pieces. Handles different separators, string delimiters 
            and paired delimiters (such as ( ), { } etc).
            TODO special case when separator is whitespace.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Replace strings, ignoring case.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.LineCount(System.String)">
            <summary>
            Returns the number of lines in string s. Only handles '\r\n' and '\n' endings.
            "line1" => 1
            "line1\r\n" => 2
            "line1\r\nline2" => 2
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.Intersect(System.String[],System.String[],System.Boolean)">
            <summary>
            Returns array of strings present in both arrays a and b.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.ExclusiveOr(System.String[],System.String[],System.Boolean)">
            <summary>
            Returns array of strings present in only *one* of given arrays a or b.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.RemoveSpans(System.String,System.Char)">
            <summary>
            Replaces spans of 2 or more of the same characters with a single character.
            RemoveSpans("123---hello-world", '-')  => "123-hello-world"
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.StripNonWordChars(System.String)">
            <summary>
            Replaces any non-word characters with a ? character.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.StripNonWordChars(System.String,System.Char)">
            <summary>
            Strips any non-word characters from a string. 
            Replaces non-words with given replacement character or removes
            them when replacer = 0.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.RemoveDiacritic(System.Char)">
            <summary>
            Returns the character without diacritics. The return
            value is a string because some special characters
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.StripDiacritics(System.String)">
            <summary>
            Strips diacritics from a Latin-character unicode string. 
            Replaces unknown unicode characters with a ? character.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.StripDiacritics(System.String,System.Char)">
            <summary>
            Strips diacritics from a Latin-character unicode string. 
            Replaces unknown unicode characters with given replacement
            character. If replacer is zero, the unknown characters are
            removed.
            </summary>
        </member>
        <member name="M:Glue.Lib.StringHelper.InitializeDiacritics">
            <summary>
            Stores Unicode characters and their "normalized"
            values to a hash table. Character codes are referenced
            by hex numbers because that's the most common way to
            refer to them.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.MimeHeader">
            <summary>
            MimeHeader encapsulates a single MIME header as specified in 
            RFC 1521  and 822.
            
            A typical MIME header looks thusly:
            
                Content-Type: text/plain
                
            or:
            
                Content-Type: multipart/alternative; 
                    boundary="bound_1";
                    notherparam=wok
                    
            Please note a header can span multiple lines (continuation is 
            marked by 1 or more spaces at beginning of a line). 
            
            Please also note that a MIME header has a Name, a Value and 
            optional Params: the second header is named 'Content-Type', 
            has a Value of 'multipart/alternative' and contains two Params: 
            'boundary' with value 'bound_1' and 'notherparam' with value 
            'wok'.
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.HttpResponse">
            <summary>
            Summary description for HttpResponse.
            </summary>
        </member>
        <member name="T:Glue.Lib.OrderedDictionary">
            <summary>
            OrderedDictionary contains key/value pairs. In contrast to standard IDictionary behaviour
            all pairs are in kept in the order in which they were added.
            N.B. Just as with an IDictionary, the enumerator (used with foreach) returns
            DictionaryEntry items.
            </summary>
        </member>
        <member name="P:Glue.Lib.OrderedDictionary.Item(System.Int32)">
            <summary>
            TODO: Replace by GetAt(int index)
            </summary>
        </member>
        <member name="T:Glue.Lib.Mail.SmtpMail">
            <remarks>
            </remarks>
        </member>
        <member name="T:Glue.Lib.Level">
            <summary>  
            Log level
            </summary> 
        </member>
        <member name="F:Glue.Lib.Level.Fatal">
            <summary>
            0: Fatal
            </summary>
        </member>
        <member name="F:Glue.Lib.Level.Error">
            <summary>
            1: Error
            </summary>
        </member>
        <member name="F:Glue.Lib.Level.Warn">
            <summary>
            2: Warn
            </summary>
        </member>
        <member name="F:Glue.Lib.Level.Info">
            <summary>
            3: Info
            </summary>
        </member>
        <member name="F:Glue.Lib.Level.Debug">
            <summary>
            4: debug
            </summary>
        </member>
        <member name="T:Glue.Lib.Log">
            <summary>
            Logs information to different media. The Log initializes itself from the 
            mounted /logging configuration (see <see cref="T:Glue.Lib.Configuration"/>). If no configuration
            data is found, a default logger will be initialized.
            </summary>
            
            <remarks>
            <p>
            Log messages are written to one or more <see cref="T:Glue.Lib.LogAppender"/> objects. Appenders 
            are responsible for writing the message, for example, to the console 
            (<see cref="T:Glue.Lib.ConsoleAppender"/>), 
            a rolling log file (<see cref="T:Glue.Lib.FileAppender"/>),
            a syslog-server (<see cref="T:Glue.Lib.SysLogAppender"/>),
            or the default output (<see cref="T:Glue.Lib.DefaultAppender"/>).
            </p>
            <p>
            The <see cref="T:Glue.Lib.Log"/> class expect configuration data to persist under config::/logging
            structured as follows:
            </p>
            <code>
            <![CDATA[
              <logging level="Fatal|Error|Warn|Info|Debug">
                <appenders>
                  <add type="DefaultAppender" />
                  <add type="ConsoleAppender" />
                  <add type="FileAppender" file="$exe$-$yyyy$-$mm$-$dd$.log" />
                  <add type="SysLogAppender" server="localhost" port="514" method="UDP" facility="deamon" category="TEST_CAT"/>
                </appenders>
              </logging>
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Glue.Lib.Log.#ctor">
            <summary>
            Protected default constructor.
            </summary>
        </member>
        <member name="M:Glue.Lib.Log.#ctor(System.Xml.XmlNode)">
            <summary>
            Protected constructor, to be called from Config class.
            </summary>
        </member>
        <member name="T:Glue.Lib.LogAppender">
            <summary>
            Abstract base class for <see cref="T:Glue.Lib.Log"/> Appenders. 
            </summary>
            <remarks>
            <p>
            Log messages are written to one or more <see cref="T:Glue.Lib.LogAppender"/> objects. Appenders 
            are responsible for writing the message, for example, to the console 
            (<see cref="T:Glue.Lib.ConsoleAppender"/>), a rolling log file (<see cref="T:Glue.Lib.FileAppender"/>),
            or the default output (<see cref="T:Glue.Lib.DefaultAppender"/>).
            </p>
            <p>
            The <see cref="T:Glue.Lib.Log"/> class expect configuration data to persist under config::/logging
            structured as follows:
            </p>
            <code>
            <![CDATA[
              <logging level="Fatal|Error|Warn|Info|Debug">
                <appenders>
                  <add type="DefaultAppender" />
                  <add type="ConsoleAppender" />
                  <add type="FileAppender" file="$exe$-$yyyy$-$mm$-$dd$.log" />
                  <add type="SysLogAppender" server="localhost" port="514" method="UDP" facility="deamon" category="TEST_CAT"/>
                </appenders>
              </logging>
            ]]>
            </code>
            <p>
            A level-attribute is optional. This sets the log level for one specific appender. The default value is the global log level.
            </p>
            </remarks>
        </member>
        <member name="F:Glue.Lib.LogAppender.Level">
            <summary>
            Log level
            </summary>
        </member>
        <member name="M:Glue.Lib.LogAppender.InitLevel(Glue.Lib.Level)">
            <summary>
            Initialize log level for this appender
            </summary>
            <param name="defaultLevel">Default log level</param>
        </member>
        <member name="T:Glue.Lib.DefaultAppender">
            <summary>
            Writes to system debug output.
            </summary>
            <remarks>
            <p>
            Log messages are written to one or more <see cref="T:Glue.Lib.LogAppender"/> objects. Appenders 
            are responsible for writing the message, for example, to the console 
            (<see cref="T:Glue.Lib.ConsoleAppender"/>), a rolling log file (<see cref="T:Glue.Lib.FileAppender"/>),
            or the default output (<see cref="T:Glue.Lib.DefaultAppender"/>).
            </p>
            <p>
            The <see cref="T:Glue.Lib.Log"/> class expect configuration data to persist under config::/logging
            structured as follows:
            </p>
            <code>
            <![CDATA[
              <logging level="Fatal|Error|Warn|Info|Debug">
                <appenders>
                  <add type="DefaultAppender" />
                  <add type="ConsoleAppender" />
                  <add type="FileAppender" file="$exe$-$yyyy$-$mm$-$dd$.log" />
                  <add type="SysLogAppender" server="localhost" port="514" method="UDP" facility="deamon" category="TEST_CAT"/>
                </appenders>
              </logging>
            ]]>
            </code>
            <p>
            A level-attribute is optional. This sets the log level for one specific appender. The default value is the global log level.
            </p>
            </remarks>
        </member>
        <member name="T:Glue.Lib.ConsoleAppender">
            <summary>
            Writes log output to stdout.
            </summary>
            <remarks>
            <p>
            Log messages are written to one or more <see cref="T:Glue.Lib.LogAppender"/> objects. Appenders 
            are responsible for writing the message, for example, to the console 
            (<see cref="T:Glue.Lib.ConsoleAppender"/>), a rolling log file (<see cref="T:Glue.Lib.FileAppender"/>),
            or the default output (<see cref="T:Glue.Lib.DefaultAppender"/>).
            </p>
            <p>
            The <see cref="T:Glue.Lib.Log"/> class expect configuration data to persist under config::/logging
            structured as follows:
            </p>
            <code>
            <![CDATA[
              <logging level="Fatal|Error|Warn|Info|Debug">
                <appenders>
                  <add type="DefaultAppender" />
                  <add type="ConsoleAppender" />
                  <add type="FileAppender" file="$exe$-$yyyy$-$mm$-$dd$.log" />
                  <add type="SysLogAppender" server="localhost" port="514" method="UDP" facility="deamon" category="TEST_CAT"/>
                </appenders>
              </logging>
            ]]>
            </code>
            <p>
            A level-attribute is optional. This sets the log level for one specific appender. The default value is the global log level.
            </p>
            </remarks>
        </member>
        <member name="T:Glue.Lib.FileAppender">
            <summary>
            Writes log output to rolling log file.
            </summary>
            <remarks>
            <p>
            Log messages are written to one or more <see cref="T:Glue.Lib.LogAppender"/> objects. Appenders 
            are responsible for writing the message, for example, to the console 
            (<see cref="T:Glue.Lib.ConsoleAppender"/>), a rolling log file (<see cref="T:Glue.Lib.FileAppender"/>),
            or the default output (<see cref="T:Glue.Lib.DefaultAppender"/>).
            </p>
            <p>
            The <see cref="T:Glue.Lib.Log"/> class expect configuration data to persist under config::/logging
            structured as follows:
            </p>
            <code>
            <![CDATA[
              <logging level="Fatal|Error|Warn|Info|Debug">
                <appenders>
                  <add type="DefaultAppender" />
                  <add type="ConsoleAppender" />
                  <add type="FileAppender" file="$exe$-$yyyy$-$mm$-$dd$.log" />
                </appenders>
              </logging>
            ]]>
            </code>
            
            <p>
            This way, a file appender can be declared. The following values can be used:
            <list type="bullet">
            <item>$yyyy$: full year </item>
            <item>$yy$: year (short format)</item>
            <item>$mm$: month</item>
            <item>$dd$: day</item>
            <item>$exe$: process name</item>
            </list>
            </p>
            <p>
            A level-attribute is optional. This sets the log level for one specific appender. The default value is the global log level.
            </p>
            </remarks>
        </member>
        <member name="T:Glue.Lib.SysLogAppender">
            <summary>
            Writes log output to a syslog server.
            </summary>
            <remarks>
            <p>
            Log messages are written to one or more <see cref="T:Glue.Lib.LogAppender"/> objects. Appenders 
            are responsible for writing the message, for example, to the console 
            (<see cref="T:Glue.Lib.ConsoleAppender"/>), a rolling log file (<see cref="T:Glue.Lib.FileAppender"/>),
            or the default output (<see cref="T:Glue.Lib.DefaultAppender"/>).
            </p>
            <p>
            The <see cref="T:Glue.Lib.Log"/> class expect configuration data to persist under config::/logging
            structured as follows:
            </p>
            <code>
            <![CDATA[
              <logging level="Fatal|Error|Warn|Info|Debug">
                <appenders>
                  <add type="DefaultAppender" />
                  <add type="ConsoleAppender" />
                  <add type="FileAppender" file="$exe$-$yyyy$-$mm$-$dd$.log" />
                  <add type="SysLogAppender" server="localhost" port="514" method="UDP" facility="deamon" category="TEST_CAT"/>
                </appenders>
              </logging>
            ]]>
            </code>
            
            <p>
            The category-attribute is mandatory. This should contain the name of the application or service. 
            </p>
            <p>
            The method-attribute is optional. Can be either "TCP" or "UDP". Default is UDP.
            </p>
            <p>
            A level-attribute is optional. This sets the log level for one specific appender. The default value is the global log level.
            </p>
            <p>
            The port-attribute is optional. Default value is 514 for UDP, 1468 for TCP.
            </p>
            <p>
            The facility-attribute is optional. Default value is 'deamon'. Other possible values:
            <list type="bullet">
            <item>Kernel </item>
            <item>User </item>
            <item>Mail </item>
            <item>Daemon </item>
            <item>Auth </item>
            <item>Syslog </item>
            <item>Lpr </item>
            <item>News </item>
            <item>UUCP </item>
            <item>Cron </item>
            <item>Local0 </item>
            <item>Local1 </item>
            <item>Local2 </item>
            <item>Local3 </item>
            <item>Local4 </item>
            <item>Local5 </item>
            <item>Local6 </item>
            <item>Local7 </item>
            </list>
            </p>
            </remarks>
        </member>
        <member name="F:Glue.Lib.SysLogAppender._server">
            <summary>
            Syslog server name 
            </summary>
        </member>
        <member name="F:Glue.Lib.SysLogAppender._port">
            <summary>
            Syslog server port
            </summary>
        </member>
        <member name="F:Glue.Lib.SysLogAppender._facility">
            <summary>
            Facility
            </summary>
        </member>
        <member name="F:Glue.Lib.SysLogAppender._client">
            <summary>
            ISyslogClient
            </summary>
        </member>
        <member name="F:Glue.Lib.SysLogAppender._machine">
            <summary>
            Local machine name
            </summary>
        </member>
        <member name="F:Glue.Lib.SysLogAppender._method">
            <summary>
            UDP or TCP
            </summary>
        </member>
        <member name="F:Glue.Lib.SysLogAppender._category">
            <summary>
            Category
            </summary>
        </member>
        <member name="F:Glue.Lib.Text.ConversionMode.LeaveIntact">
            <summary>
            Suppress all transformations. (Do nothing.)
            </summary>
        </member>
        <member name="F:Glue.Lib.Text.ConversionMode.EducateDefault">
            <summary>
            Performs default SmartyPants transformations: quotes (including
            backticks-style), em-dashes, and ellipses. `--` (dash dash) is
            used to signify an em-dash; there is no support for en-dashes.
            </summary>
        </member>
        <member name="F:Glue.Lib.Text.ConversionMode.EducateOldSchool">
            <summary>
            Same as <seealso cref="F:Glue.Lib.Text.ConversionMode.EducateDefault"/>, except that it uses the old-school
            typewriter shorthand for dashes: `--` (dash dash) for en-dashes,
            `---` (dash dash dash) for em-dashes.
            </summary>
        </member>
        <member name="F:Glue.Lib.Text.ConversionMode.EducateOldSchoolInverted">
            <summary>
            Same as smarty_pants="2", but inverts the shorthand for dashes: `--`
            (dash dash) for em-dashes, and `---` (dash dash dash) for en-dashes.
            </summary>
        </member>
        <member name="F:Glue.Lib.Text.ConversionMode.Stupefy">
            <summary>
            Stupefy mode. Reverses the SmartyPants transformation process,
            turning the HTML entities produced by SmartyPants into their ASCII
            equivalents. E.g. `&#8220;` is turned into a simple double-quote
            (`"`), `&#8212;` is turned into two dashes, etc.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.SmartyPants.TokenizeHTML(System.String)">
            <summary>
            
            </summary>
            <param name="text">String containing HTML markup.</param>
            <returns>An array of the tokens comprising the input string. Each token is 
            either a tag (possibly with nested, tags contained therein, such 
            as &lt;a href="&lt;MTFoo>"&gt;, or a run of text between tags. Each element of the 
            array is a two-element array; the first is either 'tag' or 'text'; the second is 
            the actual value.
            </returns>
        </member>
        <member name="T:Glue.Lib.Servers.SmtpServer">
            <summary>
            Summary description for SmtpServer.
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.TcpServer">
            <summary>
            Single threaded server
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.TcpServer.CreateConnection(System.Net.Sockets.Socket)">
            <summary>
            Creates a connection object. Override this in
            your server class to create a protocol specific
            connection class.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.TcpServer.#ctor(System.Net.IPEndPoint)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.TcpServer.Start">
            <summary>
            Starts the server
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.TcpServer.Stop">
            <summary>
            Stops the server
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.TcpServer.IsAllowed(System.Net.IPAddress)">
            <summary>
            IsAllowed
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.TcpServer.OnSocketAccept(System.Object)">
            <summary>
            Asynchronous callback on socket accept.
            </summary>
            <param name="acceptedSocket"></param>
        </member>
        <member name="M:Glue.Lib.Servers.TcpServer.OnSocketListen(System.Object)">
            <summary>
            Asynchronous callback to start listening
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.SmtpServer.CreateConnection(System.Net.Sockets.Socket)">
            <summary>
            Overridden to return a SMTP specific connection object.
            </summary>
        </member>
        <member name="T:Glue.Lib.Compilation.CompilerInfo">
            <summary>
            Stores compiler information. Used by Glue.Lib.Compilation.Settings.
            </summary>
        </member>
        <member name="T:Glue.Lib.Compilation.AspTemplateCompiler">
            <summary>
            Summary description for AspTemplateCompiler.
            </summary>
        </member>
        <member name="T:Glue.Lib.Compilation.TemplateCompiler">
            <summary>
            Summary description for TemplateCompiler 
            </summary>
        </member>
        <member name="T:Glue.Lib.Compilation.BaseCompiler">
            <summary>
            Summary description for BaseCompiler
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.BaseCompiler.#ctor">
            <summary>
            Protected default constructor.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.BaseCompiler.Compile">
            <summary>
            Override Compile in derived class.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.BaseCompiler.GetFileContents(System.String)">
            <summary>
            Loads text from given file.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.BaseCompiler.GetLineCount(System.String)">
            <summary>
            Returns number of lines in given text. Handles different CR/LF, LF, CR 
            combinations.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.BaseCompiler.GetLineCount(System.String,System.Int32,System.Int32)">
            <summary>
            Returns number of lines in given section of text. 
            Handles different CR/LF, LF, CR  combinations.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.BaseCompiler.MapPath(System.String)">
            <summary>
            Map a path as specified in a source directive to a physical path.
            Override this to achieve path virtualisation.
            </summary>
        </member>
        <member name="M:Glue.Lib.Compilation.BaseCompiler.ResolveAssemblyPath(System.String)">
            <summary>
            Resolves the physical path to the given assembly.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.BaseCompiler.CompiledAssembly">
            <summary>
            Resultant compiled assembly.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.BaseCompiler.Language">
            <summary>
            Programming language
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.BaseCompiler.Settings">
            <summary>
            Configured compiler settings.
            </summary>
        </member>
        <member name="P:Glue.Lib.Compilation.BaseCompiler.Parameters">
            <summary>
             Constructs parameters based on Settings. 
            </summary>
        </member>
        <member name="T:Glue.Lib.Applet">
            <summary>
            Applet.
            </summary>
        </member>
        <member name="P:Glue.Lib.Applet.ExePath">
            <summary>
            Returns the path of the executing assembly.
            </summary>
        </member>
        <member name="P:Glue.Lib.Applet.ExeDirectory">
            <summary>
            Returns the directory of the executing assembly.
            </summary>
        </member>
        <member name="P:Glue.Lib.Applet.CurrentDirectory">
            <summary>
            Returns the current working directory.
            </summary>
        </member>
        <member name="P:Glue.Lib.Applet.FrameworkDirectory">
            <summary>
            Returns the .NET framework directory for this assembly.
            </summary>
        </member>
        <member name="T:Glue.Lib.Xml.XmlNodeWriter">
            <summary>
            XmlNodeWriter builds a tree of XmlNodes based on the XmlWriter methods that are called.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.#ctor(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Construct XmlNodeWriter for building the content of the given root XmlElement node.
            </summary>
            <param name="root">If root contains any content it will be completely replaced by what the XmlNodeWriter produces.</param>
            <param name="clearCurrentContents">Clear the current children of the given node</param>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.#ctor(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Construct XmlNodeWriter for building the content of the given root XmlDocument node.
            </summary>
            <param name="root">If root contains any content it will be completely replaced by what the XmlNodeWriter produces.</param>
            <param name="clearCurrentContents">Clear the current children of the given node</param>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.Close">
            <summary>
            This auto-closes any open elements and puts the writer in the WriteState.Closed state.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.Flush">
            <summary>
            This is a noop.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.LookupPrefix(System.String)">
            <summary>
            Returns the result of GetPrefixOfNamespace on the current node.
            </summary>
            <param name="ns">The namespaceURI to lookup the associated prefix for.</param>
            <returns>The prefix or null if no matching namespaceURI is in scope.</returns>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is implemented using Convert.ToBase64String.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This is implementd using a temporary XmlTextWriter to turn the 
            given binary blob into a string, then it calls WriteString with
            the result.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteCData(System.String)">
            <summary>
            Creates a System.Xml.XmlCDataSection node.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteCharEntity(System.Char)">
            <summary>
            Writes the given char as a string.  The XmlDocument has no representation for 
            character entities, so the fact that this was called will be lost.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calls WriteString with new string(buffer, index, count).
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteComment(System.String)">
            <summary>
            Creates an System.Xml.XmlComment node.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an System.Xml.XmlDocumentType node.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteEndAttribute">
            <summary>
            Closes the previous WriteStartAttribute call.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteEndDocument">
            <summary>
            Closes any open elements and puts the writer back in the Start state.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteEndElement">
            <summary>
            Closes the previous WriteStartElement call.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteEntityRef(System.String)">
            <summary>
            Creates a System.Xml.XmlEntityReference node.
            </summary>
            <param name="name">The name of the entity reference</param>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteFullEndElement">
            <summary>
            The DOM does not preserve this information, so this is equivalent to WriteEndElement.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteName(System.String)">
            <summary>
            Calls WriteString if the name is a valid XML name.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteNmToken(System.String)">
            <summary>
            Calls WriteString if the name is a valid XML NMTOKEN.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            Creates a System.Xml.XmlProcessingInstruction node.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteQualifiedName(System.String,System.String)">
            <summary>
            Looks up the prefix in scope for the given namespace and calls WriteString
            with the prefix+":"+localName (or just localName if the prefix is the empty string).
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteRaw(System.String)">
            <summary>
            WriteRaw writes out the given string "unescaped", in other words it better be well formed XML markup.
            So for the XmlNodeWriter we parse this string and build the resulting tree, so it maps to setting the
            InnerXml property.  
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calls WriteRaw(string) with new string(buffer, index, count)
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Creates a System.Xml.XmlAttribute node.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteStartDocument">
            <summary>
            Writes the XmlDeclaration node with a standalone attribute.  This is only allowed when the
            writer is in the Start state, which only happens if the writer was constructed with an
            XmlDocument object.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the XmlDeclaration node with a standalone attribute.  This is only allowed when the
            writer is in the Start state, which only happens if the writer was constructed with an
            XmlDocument object.
            </summary>
            <param name="standalone">If true, standalone attribute has value "yes" otherwise it has the value "no".</param>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Creates a System.Xml.XmlElement node.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteString(System.String)">
            <summary>
            Creates a System.Xml.XmlText node.  If the current node is already an XmlText
            node it appends the text to that node.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            Calls WriteString with the character data.
            </summary>
        </member>
        <member name="M:Glue.Lib.Xml.XmlNodeWriter.WriteWhitespace(System.String)">
            <summary>
            Create a System.Xml.XmlWhitespace node.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.XmlNodeWriter.WriteState">
            <summary>
            Return the current state of the writer.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.XmlNodeWriter.XmlLang">
            <summary>
            Return the current XmlLang state.  This does not have an efficient implementation, so use at your own risk.
            </summary>
        </member>
        <member name="P:Glue.Lib.Xml.XmlNodeWriter.XmlSpace">
            <summary>
            Return the current XmlSpace state.  This does not have an efficient implementation, so use at your own risk.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.#cctor">
            <summary>
            Static constructor
            </summary>
            <remarks>
            In the static constuctor we'll initialize what stays the same across all transforms.
            </remarks>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.Process(System.String)">
            <summary>
            Main function. The order in which other subs are called here is
            essential. Link and image substitutions need to happen before
            EscapeSpecialChars(), so that any *'s or _'s in the <a></a>
            and <img/> tags get encoded.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.StripLinkDefinitions(System.String)">
            <summary>
            Strips link definitions from text, stores the URLs and titles in hash references.
            </summary>
            <remarks>Link defs are in the form: ^[id]: url "optional title"</remarks>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.HashHTMLBlocks(System.String)">
            <summary>
            Hashify HTML blocks
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.RunBlockGamut(System.String)">
            <summary>
            These are all the transformations that form block-level 
            tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.RunSpanGamut(System.String)">
            <summary>
            These are all the transformations that occur *within* block-level 
            tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.TokenizeHTML(System.String)">
            <summary>
            
            </summary>
            <param name="text">String containing HTML markup.</param>
            <returns>An array of the tokens comprising the input string. Each token is 
            either a tag (possibly with nested, tags contained therein, such 
            as &lt;a href="&lt;MTFoo>"&gt;, or a run of text between tags. Each element of the 
            array is a two-element array; the first is either 'tag' or 'text'; the second is 
            the actual value.
            </returns>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.DoAnchors(System.String)">
            <summary>
            Turn Markdown link shortcuts into XHTML &lt;a> tags. 
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.DoImages(System.String)">
            <summary>
            Turn Markdown image shortcuts into &lt;img> tags. 
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.ProcessListItems(System.String,System.String)">
            <summary>
            Process the contents of a single ordered or unordered list, splitting it
            into individual list items.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.EncodeCode(System.String)">
            <summary>
            Encode/escape certain characters inside Markdown code runs.
            </summary>
            <remarks>
            The point is that in code, these characters are literals, and lose their 
            special Markdown meanings.
            </remarks>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.EncodeAmpsAndAngles(System.String)">
            <summary>
            Smart processing for ampersands and angle brackets that need to be encoded.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.UnescapeSpecialChars(System.String)">
            <summary>
            Swap back in all the special characters we've hidden. 
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.Outdent(System.String)">
            <summary>
            Remove one level of line-leading tabs or spaces
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.RepeatString(System.String,System.Int32)">
            <summary>
            This is to emulate what's evailable in PHP
            </summary>
            <param name="text"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Glue.Lib.Text.Markdown.ComputeMD5(System.String)">
            <summary>
            Calculate an MD5 hash of an arbitrary string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Glue.Lib.Mail.TransferEncoding">
            <summary>
            TransferEncoding 
            </summary>
        </member>
        <member name="F:Glue.Lib.Mail.TransferEncoding.Bit7">
            <summary>
            </summary>
        </member>
        <member name="F:Glue.Lib.Mail.TransferEncoding.Bit8">
            <summary>
            </summary>
        </member>
        <member name="F:Glue.Lib.Mail.TransferEncoding.UUEncode">
            <summary>
            </summary>
        </member>
        <member name="F:Glue.Lib.Mail.TransferEncoding.Base64">
            <summary>
            </summary>
        </member>
        <member name="F:Glue.Lib.Mail.TransferEncoding.QuotedPrintable">
            <summary>
            </summary>
        </member>
        <member name="T:Glue.Lib.Mapper">
            <summary>
            A Mapper can be used to map properties from 
            a NameValueCollection to one or more instance types.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.#ctor">
            <summary>
            Protected constructor to prevent creation.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Create(System.Type,System.Collections.IDictionary)">
            <summary>
            Create an instance of given type. Construct it with data in bag.
            Throws CombinedException on error.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Create(System.Type,System.Collections.IDictionary,System.IFormatProvider)">
            <summary>
            Create an instance of given type. Construct it with data in bag.
            Throws CombinedException on error.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Create(System.Type,System.Collections.IDictionary,Glue.Lib.CombinedException)">
            <summary>
            Create an instance of given type. Construct it with data in bag.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Create(System.Type,System.Collections.IDictionary,System.IFormatProvider,Glue.Lib.CombinedException)">
            <summary>
            Create an instance of given type. Construct it with data in bag.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Assign(System.Object,System.Collections.IDictionary)">
            <summary>
            Assign values in bag to given instance.
            Throws CombinedException on error.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Assign(System.Object,System.Collections.IDictionary,System.IFormatProvider)">
            <summary>
            Assign values in bag to given instance.
            Throws CombinedException on error.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Assign(System.Object,System.Collections.IDictionary,Glue.Lib.CombinedException)">
            <summary>
            Assign values in bag to given instance.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Assign(System.Object,System.Collections.IDictionary,System.IFormatProvider,Glue.Lib.CombinedException)">
            <summary>
            Assign values in bag to given instance.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.AssignAllowed(System.Object,System.Collections.IDictionary,System.String,System.IFormatProvider,Glue.Lib.CombinedException)">
            <summary>
            Assign values in bag to given instance. 'allowed' is a comma separated list of names of fields/properties that may be assigned to.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Assign(System.Object,Glue.Lib.Mapper.MemberHelper,System.Object,System.IFormatProvider,Glue.Lib.CombinedException)">
            <summary>
            Private function to assign or initialise an individual member of 
            an object instance (owner) with given value.
            This method is used to set fields and properties on classes *and*
            fill parameters in calls to methods. In that case owner will always
            be null.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Invoke(System.Object,System.String,System.Collections.IDictionary)">
            <summary>
            Select and invoke given method, passing parameters in bag.
            Throws CombinedException on error.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Invoke(System.Object,System.Reflection.MethodInfo,System.Collections.IDictionary)">
            <summary>
            Select and invoke given method, passing parameters in bag.
            Throws CombinedException on error.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Invoke(System.Object,System.String,System.Collections.IDictionary,Glue.Lib.CombinedException)">
            <summary>
            Select and invoke given method, passing parameters in bag.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Invoke(System.Object,System.Reflection.MethodInfo,System.Collections.IDictionary,Glue.Lib.CombinedException)">
            <summary>
            Invoke given method, passing parameters in bag.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.Select(System.Type,System.String,System.Collections.IDictionary,Glue.Lib.CombinedException)">
            <summary>
            Select a method based on given action and closest matching the parameters
            specified in bag.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.SelectBestCandidate(System.Reflection.MethodBase[],System.Collections.IDictionary)">
            <summary>
            Select methods closest matching the given parameters in bag.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mapper.BuildArgs(System.Reflection.MethodBase,System.Collections.IDictionary,Glue.Lib.CombinedException)">
            <summary>
            Fill an array of arguments based on parameter information of given method (or constructor)
            and the values in bag.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mapper.MemberHelper">
            <summary>
            Private helper class.
            </summary>
        </member>
        <member name="T:Glue.Lib.IO.WildCard">
            <summary>
            Summary description for WildCard.
            </summary>
        </member>
        <member name="M:Glue.Lib.IO.WildCard.Matches(System.String,System.String)">
            <summary>
              Matches tests whether the given input string matches the wildcard. WildCard
              can contain * and ? special characters.
            </summary>
        </member>
        <member name="M:Glue.Lib.IO.WildCard.Matches(System.String,System.String[])">
            <summary>
              Matches tests whether the given input string matches the list of wildcards. 
              WildCards can contain * and ? special characters.
            </summary>
        </member>
        <member name="M:Glue.Lib.IO.WildCard.Matches(System.String,System.Collections.IEnumerable)">
            <summary>
              Matches tests whether the given input string matches the list of wildcards. 
              WildCards can contain * and ? special characters.
            </summary>
        </member>
        <member name="M:Glue.Lib.IO.WildCard.Matches(System.String,System.Int32,System.String,System.Int32)">
            <summary>
              Matches tests whether the given input string matches the wildcard. WildCard
              can contain * and ? special characters.
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.CsvReader">
            <summary>
            Csv-file reader class. Enables easy reading of Csv (and comparable) formats.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Constructor. Creates a new CsvReader instance.
            </summary>
            <param name="reader">TextReader</param>
            <param name="header">True if the first row in the file is a header row</param>
            <remarks>The default seperator "," is used.</remarks>
        </member>
        <member name="M:Glue.Lib.Text.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Constructor. Creates a new CsvReader instance.
            </summary>
            <param name="reader">TextReader</param>
            <param name="header">True if the first row in the file is a header row</param>
            <param name="separator">Separator charactor</param>
        </member>
        <member name="M:Glue.Lib.Text.CsvReader.Close">
            <summary>
            Close the CsvReader and the underlying TextReader.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.CsvReader.IndexOf(System.String)">
            <summary>
            Return the index of the given column
            </summary>
            <param name="name">Column name</param>
            <returns>Index; -1 if the column name could not be found.</returns>
        </member>
        <member name="M:Glue.Lib.Text.CsvReader.Read">
            <summary>
            Read another line. 
            </summary>
            <returns>True if another line could be read from the TextReader</returns>
        </member>
        <member name="P:Glue.Lib.Text.CsvReader.Line">
            <summary>
            Return the current line.
            </summary>
        </member>
        <member name="P:Glue.Lib.Text.CsvReader.LineNumber">
            <summary>
            Return the current line number
            </summary>
        </member>
        <member name="P:Glue.Lib.Text.CsvReader.Separator">
            <summary>
            Separator char. Default is ",".
            </summary>
        </member>
        <member name="P:Glue.Lib.Text.CsvReader.Values">
            <summary>
            Return the values on the current line
            </summary>
        </member>
        <member name="P:Glue.Lib.Text.CsvReader.Names">
            <summary>
            Return the column names
            </summary>
        </member>
        <member name="P:Glue.Lib.Text.CsvReader.Item(System.Int32)">
            <summary>
            Return the value in the given column number
            </summary>
            <param name="i">Column number</param>
            <returns>Value</returns>
        </member>
        <member name="P:Glue.Lib.Text.CsvReader.Item(System.String)">
            <summary>
            Returns the value for given column name.
            If no headers are used, this will throw an exception.
            If headers are used, but column name not found, will return null (important: no error).
            Follows these semantics:
            1. if column does not exist, value is null
            2. if column is empty, value is ''
            3. otherwise, normal string
            </summary>
        </member>
        <member name="M:Glue.Lib.Net.Pop3.Pop3Client.List">
            <summary>
            List message numbers
            </summary>
        </member>
        <member name="M:Glue.Lib.Net.Pop3.Pop3Client.ListUniqueIds">
            <summary>
            List message numbers and unique identifiers
            
            IDictionary ids = pop3.ListUniqueIds();
            ids[3] = "ARFEOIRUTLPTEP443E"
            </summary>
        </member>
        <member name="M:Glue.Lib.Net.Pop3.Pop3Client.Retrieve(System.Int32)">
            <summary>
            Retrieve raw message with given number
            </summary>
        </member>
        <member name="M:Glue.Lib.Net.Pop3.Pop3Client.Delete(System.Int32)">
            <summary>
            Deletes given message from server.
            </summary>
        </member>
        <member name="M:Glue.Lib.Net.Pop3.Pop3Client.RetrieveMessage(System.Int32)">
            <summary>
            Returns the message with given number
            </summary>
        </member>
        <member name="T:Glue.Lib.IO.Search">
            <summary>
            Summary description for Search.
            </summary>
        </member>
        <member name="T:Glue.Lib.Compilation.FileCompiler">
            <summary>
            Summary description for FileCompiler.
            </summary>
        </member>
        <member name="T:Glue.Lib.CollectionHelper">
            <summary>
            Summary description for CollectionHelper.
            </summary>
        </member>
        <member name="F:Glue.Lib.CollectionHelper.Separator">
            <summary>
            Separator for child-collections. Needed for (among other things) jQuery-compatibility.
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.ToBag(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Utility function to convert a flat NameValueCollection to a hierarchical 
            IDictionary (case-insensitive).
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.ToBag(System.Object[])">
            <summary>
            Utility function to convert a param list (consisting of 
            alternating key/value pairs) to a case-insensitive hierarchical 
            dictionary.
            
            CollectionHelper.ToBag("name", "John", "age", 25, "address.street", "Elm St") => { "name" => "John", "age", 25, "addres" => { "street" => "Elm St" } }
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.ToOrderedBag(System.Object[])">
            <summary>
            Utility function to convert a param list (consisting of 
            alternating key/value pairs) to a case-insensitive hierarchical 
            dictionary.
            
            CollectionHelper.ToOrderedBag("name", "John", "age", 25) => { "age" => 25, "name" => "John" }
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.Copy(System.Collections.IDictionary)">
            <summary>
            Copy a dictionary
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.Add(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Add two dictionaries
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.Subtract(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Add two dictionaries
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.Parse(System.String)">
            <summary>
            Utility to parse a string representation
            of a hash / array / value.
            Mirrors the ToString functions.
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.ToString(System.Collections.IDictionary)">
            <summary>
            Utility function for dumping contents of a IDictionary bag
            </summary>
        </member>
        <member name="M:Glue.Lib.CollectionHelper.ToString(System.Collections.IList)">
            <summary>
            Utility function for dumping contents of a IList
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.SmtpConnection">
            <summary>
            Summary description for SmtpServer.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.SmtpConnection.#ctor(Glue.Lib.Servers.SmtpServer,System.Net.Sockets.Socket)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.SmtpConnection.Process">
            <summary>
            Process a single conversation. 
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.SmtpConnection.ReadData">
            <summary>
            Override ReadData in your class to perform custom
            reading of the message. 
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.SmtpConnection.Store">
            <summary>
            Override store in your class to perform some action
            on the message
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.SmtpConnection.ReadLine">
            <summary>
            Reads an entire line from the socket.  This method
            will block until an entire line has been read.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.SmtpConnection.ReadLineFromBuffer">
            <summary>
            Helper method that returns the first full line in
            the input buffer, or null if there is no line in the buffer.
            If a line is found, it will also be removed from the buffer.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.SmtpConnection.WriteLine(System.String)">
            <summary>
            Writes the string to the socket as an entire line.  This
            method will append the end of line characters, so the data
            parameter should not contain them.
            </summary>
        </member>
        <member name="P:Glue.Lib.Servers.SmtpConnection.Server">
            <summary>
            The owning server
            </summary>
        </member>
        <member name="T:Glue.Lib.NullConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.IsNoE(System.Object)">
            <summary>
            Checks if value is null or empty.
            Returns true if v is null or DBNull, or empty string or empty GUID.
            Returns false otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.IsNullOrEmpty(System.Object)">
            <summary>
            Returns true if v is null or DBNull, or empty string or empty GUID.
            Returns false otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.Coalesce(System.Object[])">
            <summary>
            Returns the first non-null value in the argument list.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.Coalesce(System.String[])">
            <summary>
            Returns null if v is null or DBNull.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToObject(System.Object)">
            <summary>
            Returns null if v is null or DBNull.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToString(System.Object)">
            <summary>
            Returns null if v is null or DBNull, converts to string otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToString(System.Object,System.String)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to string otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToInt16(System.Object,System.Int16)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Int16 otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToInt32(System.Object,System.Int32)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Int32 otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToInt64(System.Object,System.Int64)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Int64 otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToBoolean(System.Object,System.Boolean)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Bool otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToBoolean(System.Object,System.Int32)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Bool otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToByte(System.Object,System.Byte)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Byte otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToDateTime(System.Object,System.DateTime)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to DateTime otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToSingle(System.Object,System.Single)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Single otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToDouble(System.Object,System.Double)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Double otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToDecimal(System.Object,System.Decimal)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Decimal otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToGuid(System.Object,System.Guid)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to Guid otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToEnum(System.Object,System.Object)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to given enumType otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToEnum(System.Type,System.Object,System.Object)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to given enumType otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.ToChar(System.Object,System.Char)">
            <summary>
            Returns defaultValue is v is null or DBNull, converts to char otherwise.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.To``1(System.Object)">
            <summary>
            Special version for generic nullable types, which don't handle
            DBNull at all.
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Object)">
            <summary>
            Returns DBNull if v is null, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.String)">
            <summary>
            Returns DBNull if v is null;
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Array)">
            <summary>
            Returns DBNull if v is null, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Int16,System.Int16)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Int32,System.Int32)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Int64,System.Int64)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Boolean,System.Boolean)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Byte,System.Byte)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.DateTime,System.DateTime)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Single,System.Single)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Double,System.Double)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Decimal,System.Decimal)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Guid,System.Guid)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From(System.Char,System.Char)">
            <summary>
            Returns DBNull if v is conventional null value, or v otherwise
            </summary>
        </member>
        <member name="M:Glue.Lib.NullConvert.From``1(``0)">
            <summary>
            Special version for generic nullable types, which don't handle
            DBNull at all.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mail.SmtpResponse">
            this class represents the response from the smtp server
        </member>
        <member name="M:Glue.Lib.Mail.SmtpResponse.#ctor">
            use the Parse method to create instances
        </member>
        <member name="M:Glue.Lib.Mail.SmtpResponse.Parse(System.String)">
            parses a new response object from a response string
        </member>
        <member name="P:Glue.Lib.Mail.SmtpResponse.StatusCode">
            the smtp status code FIXME: change to Enumeration?
        </member>
        <member name="P:Glue.Lib.Mail.SmtpResponse.RawResponse">
            the response as it was recieved
        </member>
        <member name="P:Glue.Lib.Mail.SmtpResponse.Parts">
            the response as parts where ; was used as delimiter
        </member>
        <member name="T:Glue.Lib.Mime.MimeHeaderCollection">
            <summary>
            Manages a collection of MimeHeader objects. A MimeHeaderCollection 
            is used by the MimePart class for accessing headers. It can also 
            be used a a stand-alone object.
            </summary>
        </member>
        <member name="T:Glue.Lib.BinHexEncoding">
            <summary>
            BinHexEncoding class.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.TransferEncoding">
            <summary> 
            TransferEncoding abstract base class. MIME Content-Transfer-Encoding
            helper classes are derived from this one. For more information see RFC 1521.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.Bit7TransferEncoding">
            <summary> 
            MIME Content-Transfer-Encoding: 7bit
            For more information, see RFC 1521.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.Bit8TransferEncoding">
            <summary> 
            MIME Content-Transfer-Encoding: 8bit
            For more information, see RFC 1521.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.BinaryTransferEncoding">
            <summary> 
            MIME Content-Transfer-Encoding: binary
            For more information, see RFC 1521.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.QuotedPrintableTransferEncoding">
            <summary> 
            MIME Content-Transfer-Encoding: quoted-printable
            For more information, see RFC 1521.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.Base64TransferEncoding">
            <summary> 
            MIME Content-Transfer-Encoding: base64
            For more information, see RFC 1521.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.MimeMapping">
            <summary>
            Summary description for MimeMapping.
            </summary>
        </member>
        <member name="T:Glue.Lib.IO.FileSet">
            <summary>
            Summary description for FileSet.
            </summary>
        </member>
        <member name="M:Glue.Lib.IO.FileSet.Scan(System.String,System.Boolean,System.Collections.Specialized.StringCollection)">
            <summary>
            </summary>
        </member>
        <member name="M:Glue.Lib.IO.FileSet.ToRegex(System.String)">
            <summary>
            Converts search pattern to a regular expression.
            </summary>
            <param name="nantPattern">Search pattern relative to the search directory.</param>
            <returns>Regular expresssion</returns>
        </member>
        <member name="M:Glue.Lib.IO.FileSet.CleanPath(System.String)">
            <summary>
            Ensure path has valid directory separator chars:
            '\' on Win32, '/' on *nix.
            </summary>
        </member>
        <member name="T:Glue.Lib.IO.FileSet.SearchDirectory">
            <summary>
            Helper class SearchDirectory 
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.HttpServer">
            <summary>
            Summary description for HttpServer.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.HttpServer.CreateConnection(System.Net.Sockets.Socket)">
            <summary>
            Overridden to return a SMTP specific connection object.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.HttpServer.CreateRequest(Glue.Lib.Servers.HttpConnection)">
            <summary>
            Override this method to for a specialized HttpRequest class.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.HttpServer.CreateResponse(Glue.Lib.Servers.HttpConnection)">
            <summary>
            Override this method to for a specialized HttpRequest class.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.HttpServer.ProcessRequest(Glue.Lib.Servers.HttpRequest,Glue.Lib.Servers.HttpResponse)">
            <summary>
            Override in derived class to actually process the request.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mail.SmtpClient">
            represents a conntection to a smtp server
        </member>
        <member name="T:Glue.Lib.Mail.MailPriority">
            <summary>
            </summary>
        </member>
        <member name="F:Glue.Lib.Mail.MailPriority.Normal">
            <summary>
            </summary>
        </member>
        <member name="F:Glue.Lib.Mail.MailPriority.Low">
            <summary>
            </summary>
        </member>
        <member name="F:Glue.Lib.Mail.MailPriority.High">
            <summary>
            </summary>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToString(System.Xml.XmlNode)">
            <summary>
            Convert XmlNode to string
            </summary>
            <param name="node">Node</param>
            <returns>String</returns>
            <remarks>
            Converts XmlAttribute or XmlElement values to string. If the node is <code>null</code>, an exception is thrown.
            </remarks>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToString(System.Xml.XmlNode,System.String)">
            <summary>
            Convert XmlNode to string
            </summary>
            <param name="node">Node</param>
            <param name="_default">Default value</param>
            <returns>String</returns>
            <remarks>
            Converts XmlAttribute or XmlElement values to string. If the node is <code>null</code>, the default value is returned.
            </remarks>
            <example>
            <code>
            // element does not contain attribute "emptyattribute"
            string defaultValue = ConvertXml.ToString(element.Attributes["emptyattribute"], "default");
            // defaultValue = "default";
            </code>
            </example>
            <example>
            <code>
            // element contains empty attribute "emptyattribute" 
            element.Attributes["emptyattribute"] = "";
            string defaultValue = ConvertXml.ToString(element.Attributes["emptyattribute"], "default");
            // defaultValue = "default";
            </code>
            </example>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToInt32(System.Xml.XmlNode)">
            <summary>
            Converts an XmlNode value to an int. If the conversion fails, an exception is thrown.
            </summary>
            <param name="node">XmlNode</param>
            <returns>int</returns>
            <example>
            <code>
            int n = ConvertXml.ToInt32(element.Attributes["intsetting"]);
            </code>
            </example>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToInt32(System.Xml.XmlNode,System.Int32)">
            <summary>
            Converts an XmlNode value to an int. If the conversion fails, a default value is returned.
            </summary>
            <param name="node">XmlNode</param>
            <param name="_default">Default return value</param>
            <returns>int</returns>
            <example>
            <code>
            // element.Attributes["intsetting"] contains "This is no int..."
            int n = ConvertXml.ToInt32(element.Attributes["intsetting"], 0);
            // n = 0
            </code>
            </example>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToNullableInt32(System.Xml.XmlNode)">
            Wok a dok.
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToNullableInt32(System.Xml.XmlNode,System.Nullable{System.Int32})">
            <summary>
            Converts an XmlNode value to an int. If the conversion fails, a default value is returned.
            </summary>
            <param name="node">XmlNode</param>
            <param name="_default">Default return value</param>
            <returns>int</returns>
            <example>
            <code>
            // element.Attributes["intsetting"] contains "This is no int..."
            int n = ConvertXml.ToInt32(element.Attributes["intsetting"], 0);
            // n = 0
            </code>
            </example>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToBoolean(System.Xml.XmlNode)">
            <summary>
            Converts an XmlNode value to a boolean. If the conversion fails, an exception is thrown.
            </summary>
            <param name="node">XmlNode</param>
            <returns>bool</returns>
            <example>
            <code>
            bool b = ConvertXml.ToBoolean(element.Attributes["boolsetting"]);
            </code>
            </example>
            <remarks>
            Yes, 1, -1, true and on are converted to <code>true</code>. 
            No, 0, false and off are converted to <code>false</code>.
            The function is case-insensitive.
            </remarks>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToBoolean(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Converts an XmlNode value to a boolean. If the conversion fails, the default value is returned.
            </summary>
            <param name="node">XmlNode</param>
            <param name="_default">Default value</param>
            <returns>bool</returns>
            <example>
            <code>
            bool b = ConvertXml.ToBoolean(element.Attributes["boolsetting"]);
            </code>
            </example>
            <remarks>
            Yes, 1, -1, true and on are converted to <code>true</code>. 
            No, 0, false and off are converted to <code>false</code>.
            The function is case-insensitive.
            </remarks>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToEnum(System.Xml.XmlNode,System.Type)">
            <summary>
            Converts an XmlNode value to an enum. If the conversion fails, an exception is thrown.
            </summary>
            <param name="node">XmlNode</param>
            <param name="enumType">Enum type</param>
            <returns>enum</returns>
            <example>
            <code>
            MyEnum en = (MyEnum) ConvertXml.ToEnum(element.Attributes["enumsetting"], typeof(MyEnum));
            </code>
            </example>
            <remarks>
            The function is case-insensitive.
            </remarks>
        </member>
        <member name="M:Glue.Lib.ConvertXml.ToEnum(System.Xml.XmlNode,System.Type,System.Object)">
            <summary>
            Converts an XmlNode value to an enum. If the conversion fails, the default value is returned.
            </summary>
            <param name="node">XmlNode</param>
            <param name="enumType">Enum type</param>
            <param name="_default">Default value</param>
            <returns>enum</returns>
            <example>
            <code>
            MyEnum en = (MyEnum) ConvertXml.ToEnum(element.Attributes["enumsetting"], typeof(MyEnum), MyEnum.Default);
            </code>
            </example>
            <remarks>
            The function is case-insensitive.
            </remarks>
        </member>
        <member name="T:Glue.Lib.Compilation.SourceCompiler">
            <summary>
            Summary description for SourceCompiler.
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.SmtpException">
            <summary>
            Summary description for SmtpException.
            </summary>
        </member>
        <member name="T:Glue.Lib.Mime.MimeUtility">
            <summary>
            Utility functions
            </summary>
        </member>
        <member name="F:Glue.Lib.Mime.MimeUtility.ISO">
            <summary>
            The iso-8859-1 encoding (Western European (ISO), codepage 28591)
            is isomorph between .NET native string and a bytearray. That is,
            for each byte value 0..255 the corresponding char value in a
            string will be the same (between 0 and 255).
            
            In short:
              bytes == ISO.GetBytes(ISO.GetString(bytes));
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.IsASCII(System.String)">
            <summary>
            Determines if a string contains only simple 7bit US ASCII 
            characters. Useful to determine if text needs to be encoded
            before stuffing it inside a MIME part.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.GenerateBoundary">
            <summary>
            Generates a boundary suitable for multipart MIME messages.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.ReadUntil(System.IO.TextReader,System.String,System.String@)">
            <summary>
            Reads lines until a MIME boundary is hit, returns both the 
            text and the last line read.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.ReadBytesUntil(System.IO.TextReader,System.String,System.String@)">
            <summary>
            Reads lines until a MIME boundary is hit, returns both the 
            text (in raw 8-bit ASCII bytes) and the last line read.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.WriteLine(System.IO.Stream,System.String)">
            <summary>
            Writes a raw 8-bit ASCII string to output and appends a CRLF newline.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.BytesToChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Converts bytes to a raw 8-bit ASCII character array.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.BytesToChars(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts bytes to a raw ASCII character array.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.BytesToChars(System.Byte[])">
            <summary>
            Converts bytes to a raw 8-bit ASCII character array.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.CharsToBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Converts 8-bit ASCII characters to a byte array.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.CharsToBytes(System.Char[],System.Int32,System.Int32)">
            <summary>
            Converts raw 8-bit ASCII characters to a byte array.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.CharsToBytes(System.Char[])">
            <summary>
            Converts raw ASCII characters to a byte array.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.StringToBytes(System.String,System.Int32,System.Int32)">
            <summary>
            Converts raw 8-bit ASCII string to a byte array.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mime.MimeUtility.StringToBytes(System.String)">
            <summary>
            Converts raw 8-bit ASCII string to a byte array.
            </summary>
        </member>
        <member name="T:Glue.Lib.Configuration">
             <summary>
             The Config class is the central registry for your application. You can mount 
             several (parts of) xml files onto keys in the Config class; it will take 
             care of creating and invoking the settings objects you define. The Config class
             can also watch for external changes in the underlying XML files and will
             automatically recreate your settings objects.
             
             When you request the config object through the Config.Get
             method with a key, a configuration object of a previously registered
             type will be constructed by feeding it the xml contents. 
             Normally this object is created once and cached. You can 
             instruct the Config class to watch for changes in the underlying
             XML file by setting watch parameter to true.
             </summary>
             <example>
               <code>
               class MySettings
               {
                   // Current settings singleton
                     
                   public static MySettings Current
                   {
                       return Config.Get("mysettings", typeof(MySettings));
                   }
            
                   public readonly int Number = 2;
                     
                   MySettings() {}
                     
                   MySettings(XmlNode node)
                   {
                       Number = Config.Read(node, "number", Number);
                   }
                 }
                 ...
                 Config.RegisterStore("%systemdrive%/logs/test.config", "mysettings", true);
                 ...
                 Console.WriteLine(MySettings.Current.Number);
               </code>
             </example>
        </member>
        <member name="M:Glue.Lib.Configuration.#cctor">
            <summary>
            Static constructor, initializes the whole shebang with a static
            memory configuration store (for default registrations) and a file 
            configuration store mapping to the standard .NET config file
            (web.config or %exename%.config).
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.Get(System.String)">
            <summary>
            Returns the configuration object mounted at given key,
            returns null if no object is found.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.Get(System.String,System.Type)">
            <summary>
            Returns the configuration object mounted at given key,
            If no information is found, registeres type _default and 
            returns an instance of this type. 
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetRoot">
            <summary>
            Returns the root element of the merged configuration stores.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetElement(System.String)">
            <summary>
            Internal method for looking up the named element.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.Merge(System.Xml.XmlElement,System.String,System.String,System.Collections.Specialized.StringCollection@)">
            <summary>
            Internal method for loading the complete merged configuration data. Will also
            load external file referred to in the loaded store itself (specified with the
            "src" attribute).
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.CacheItemRemoved(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            CacheItemRemoved
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttr(System.Xml.XmlNode,System.String)">
            <summary>
            Returns value of given attribute. Throws an exception if attribute not found,
            or empty ("").
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttr(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Returns value of given attribute. Returns _default if attribute not found.
            Throws an error if empty ("")
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttr(System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
            Returns value of given attribute. Returns _default if attribute not found.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrUInt(System.Xml.XmlNode,System.String)">
            <summary>
            Returns value of given attribute. Throws an exception if attribute not found.
            Throws an error if attribute is empty or not a valid number.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrUInt(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Returns value of given attribute. Returns _default if attribute not found.
            Throws an error if attribute is empty or not a valid number.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrBool(System.Xml.XmlNode,System.String)">
            <summary>
            Returns value of given attribute. Throws an exception if attribute not 
            found. Throws an exception if is empty or not a valid flag ('true' or 'false').
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrBool(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Returns value of given attribute. Returns _default if not found.
            Throws an exception if is empty or not a valid flag ('true' or 'false').
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrEnum(System.Xml.XmlNode,System.String,System.Type)">
            <summary>
            GetAttrEnum
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrEnum(System.Xml.XmlNode,System.String,System.Type,System.Object)">
            <summary>
            GetAttrEnum
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.FindType(System.String)">
            <summary>
            Searches for a given type (ignore case). Returns null if not found.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.SearchType(System.String,System.Type,System.Boolean)">
            <summary>
            Searches for a type in currently loaded assemblies. You 
            don't need to specify a fully qualified name. 
            Optionally give a subclass from which the type should
            inherit.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrType(System.Xml.XmlNode,System.String)">
            <summary>
            Returns value of given attribute. Throws an exception if 
            attribute is not found or the type cannot be resolved.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrType(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Returns value of given attribute. Throws an exception if 
            attribute is not found or the type cannot be resolved.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrType(System.Xml.XmlNode,System.String,System.Type)">
            <summary>
            Returns value of given attribute. Returns _default if no attribute specified.
            Throws an exception if the type cannot be found.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrType(System.Xml.XmlNode,System.String,System.String,System.Type)">
            <summary>
            Returns value of given attribute. Returns _default if no attribute specified.
            Throws an exception if the type cannot be found.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAttrPath(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Returns full path.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetChildValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Returns a child's element inner value, or _default.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetAddRemoveList(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            GetAddRemoveList.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            IConfigurationSectionHandler.Create
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetFilePath(System.String)">
            <summary>
            GetFilePath
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.GetXmlPath(System.String)">
            <summary>
            GetXmlPath
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.SanitizePath(System.String)">
            <summary>
            SanitizePath
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.ResolvePath(System.String)">
            <summary>
            ResolvePath
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.Load(System.String,System.String)">
            <summary>
            Load configuration file. Can be a standard .NET config file
            or a standalone XML file. Returns the root element of the 
            configuration. (In a stand-alone file this will correspond to
            the document's root element, in a .NET config file to the 
            configSection as specified in the file.
            </summary>
        </member>
        <member name="M:Glue.Lib.Configuration.Merge(System.Xml.XmlNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Merges XmlNode dest with XmlNode from.
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.HttpConnection">
            <summary>
            HttpConnection represents a HTTP over TCP conversation. Raw byte parsing
            and socket specifics are handled by this class, which creates (transport-
            agnostic) HttpRequest and HttpResponse classes and passes those to an 
            actual handler.
            </summary>
        </member>
        <member name="M:Glue.Lib.Servers.HttpConnection.#ctor(Glue.Lib.Servers.HttpServer,System.Net.Sockets.Socket)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Glue.Lib.Mail.MailUtil">
            <summary>
            This class contains some utillity functions
            that dont fit in other classes and to keep
            high cohesion on the other classes.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.NeedEncoding(System.String)">
            <summary>
            determines if a string needs to
            be encoded for transfering over
            the smtp protocol without risking
            that it would be changed.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.GenerateBoundary">
            <summary>
            Generate a unique boundary
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.StreamCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies from one stream to another.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.QPEncodeMaxBytes(System.Int32)">
            <summary>
            Returns max number of bytes necessary for storing QP encoded string
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.QPEncodeToString(System.Byte[])">
            <summary>
            Encodes to Quoted-Printable string (see RFC 1521)
            No special smtp dot handling is done.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.QPEncodeToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes to Quoted-Printable string (see RFC 1521)
            No special smtp dot handling is done.
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.QPEncode(System.IO.Stream,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Encodes from one stream to another using Quoted-Printable encoding (see RFC 1521)
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.QPEncode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean,System.Boolean)">
            <summary> 
            Encodes a string using Quoted-Printable encoding (see RFC 1521)
            </summary>
            <returns>Quoted-Printable encoded string</returns>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.QPDecode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean,System.Boolean)">
            <summary> 
            Decodes a string in Quoted-Printable encoding (see RFC 1521)
            </summary>
            <returns>Quoted-Printable encoded string</returns>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.Base64Encode(System.IO.Stream,System.IO.Stream)">
            <summary>
            reads bytes from a stream and writes the encoded
            as base64 encoded characters. ( 60 chars on each row) 
            </summary>
        </member>
        <member name="M:Glue.Lib.Mail.MailUtil.UUEncode(System.IO.Stream,System.IO.Stream,System.Int32,System.String)">
            <summary>
            uu encodes a stream in to another stream 
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.HtmlBuilder">
            <summary>
            Summary description for HtmlBuilder.
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.BaseTokenizer">
            <summary>
            StringTokenizer tokenized string (or stream) into tokens.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.BaseTokenizer.LA(System.Int32)">
            <summary>
            Return char in lookahead buffer
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.BaseTokenizer.Consume">
            <summary>
            Consume character and update line and column positions.
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.BaseTokenizer.StartRead">
            <summary>
            save read point positions so that CreateToken can use those
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.BaseTokenizer.GetToken">
            <summary>
            Returns the token as read from the last call to StartRead
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.BaseTokenizer.ReadPaired(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Utility function to eat paired stuff
            </summary>
        </member>
        <member name="M:Glue.Lib.Text.BaseTokenizer.ReadString(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Utility function to eat string
            </summary>
        </member>
        <member name="T:Glue.Lib.Compilation.CompilationException">
            <summary>
            CompilationException 
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.StringTemplate">
            <summary>
            StringTemplate.
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.StringTemplateException">
            <summary>
            Preprocessor for StringTemplateException sources
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.StringTemplateReader">
            <summary>
            Preprocessor for StringTemplate sources
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.StringTemplateLoader">
            <summary>
            Preprocessor for StringTemplate sources from file.
            </summary>
        </member>
        <member name="T:Glue.Lib.Text.DSON.Helper">
            <summary>
            Static helper function for JSON notation.
            </summary>
        </member>
        <member name="T:Glue.Lib.Servers.LineParser">
            <summary>
            Summary description for ByteParser.
            </summary>
        </member>
        <member name="T:Glue.Lib.Graphics.Imaging">
            <summary>
            Helper functions for uploading and thumbnailing stuff
            </summary>
        </member>
        <member name="M:Glue.Lib.Graphics.Imaging.FitBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            If either the width or the height are larger than the max allowed width, the image 
            is rescaled. The aspect ration is used to determine whether the rescaling is done 
            using the height or the width of the image.
            </summary>
        </member>
        <member name="M:Glue.Lib.Graphics.Imaging.FitBitmap(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            If either the width or the height are larger than the max allowed width, the image 
            is rescaled. The aspect ration is used to determine whether the rescaling is done 
            using the height or the width of the image.
            The image will be padded with a background of given color.
            </summary>
        </member>
        <member name="M:Glue.Lib.Graphics.Imaging.GetScalingFactor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the scaling factor to fit an image inside the
            given boundaries.
            </summary>
        </member>
        <member name="M:Glue.Lib.Graphics.Imaging.ScaleBitmap(System.Drawing.Bitmap,System.Double)">
            <summary>
            Scale a bitmap
            </summary>
        </member>
        <member name="M:Glue.Lib.Graphics.Imaging.ScaleBitmap(System.Drawing.Bitmap,System.Double,System.Double)">
            <summary>
            Scale a bitmap
            </summary>
        </member>
        <member name="M:Glue.Lib.Graphics.Imaging.ScaleBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Scale a bitmap to given width and height.
            </summary>
        </member>
        <member name="M:Glue.Lib.Graphics.Imaging.ConvertBitmap(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Convert a bitmap to naother format
            </summary>
        </member>
        <member name="M:Glue.Lib.Graphics.Imaging.FormatFromPath(System.String)">
            <summary>
            Determines the ImageFormat from the filename. 
            </summary>
        </member>
    </members>
</doc>
