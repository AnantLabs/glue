/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/
-->begin
using System;
using System.IO;
using System.Collections; 

-->namespace

public class Token {
	public int kind;    // token kind
	public int pos;     // token position in the source text (starting at 0)
	public int col;     // token column (starting at 0)
	public int line;    // token line (starting at 1)
	public string val;  // token value
	public Token next;  // ML 2005-03-11 Tokens are kept in linked list
}

public class Buffer {
    public const char EOF = (char)256;
    string buf;         // buffer
    int pos;            // current position in buffer

    public Buffer(string text) {
        buf = text;
        pos = 0;
    }
    
    public int Read() {
        if (pos < buf.Length)
            return buf[pos++];
        else
            return EOF;
    }

    public int Peek() {
        if (pos < buf.Length) 
            return buf[pos];
        else 
            return EOF;
    }

    public int Pos {
        get { 
            return pos; 
        }
        set { 
            if (value < 0) 
                value = 0; 
            else if (value > buf.Length) 
                value = buf.Length;
            pos = value;
        }
    }
}

public class Scanner {
	const char EOL = '\n';
	const int eofSym = 0; /* pdt */
-->declarations

	public Buffer buffer; // scanner buffer
	
	protected Token t;          // current token
	protected char ch;          // current input character
	protected int pos;          // column number of current character
	protected int line;         // line number of current character
	protected int lineStart;    // start position of current line
	protected int oldEols;      // EOLs that appeared in a comment;
	protected BitArray ignore;  // set of characters to be ignored by the scanner

	protected Token tokens;     // list of tokens already peeked (first token is a dummy)
	protected Token pt;         // current peek token
	
	protected char[] tval = new char[128]; // text of current token
	protected int tlen;         // length of current token
	
	public Scanner(string text) : this(new Buffer(text)) {
	}
	
	public Scanner(Buffer buf) {
	    buffer = buf;
	    Init();
	}
	
	protected void Init() {
		pos = -1; line = 1; lineStart = 0;
		oldEols = 0;
		NextCh();
		ignore = new BitArray(charSetSize+1);
		ignore[' '] = true;  // blanks are always white space
-->initialization
		pt = tokens = new Token();  // first token is a dummy
	}
	
	protected void NextCh() {
		if (oldEols > 0) { ch = EOL; oldEols--; } 
		else {
			ch = (char)buffer.Read(); pos++;
			// replace isolated '\r' by '\n' in order to make
			// eol handling uniform across Windows, Unix and Mac
			if (ch == '\r' && buffer.Peek() != '\n') ch = EOL;
			if (ch == EOL) { line++; lineStart = pos + 1; }
		}
-->casing1
	}

	protected void AddCh() {
		if (tlen >= tval.Length) {
			char[] newBuf = new char[2 * tval.Length];
			Array.Copy(tval, 0, newBuf, 0, tval.Length);
			tval = newBuf;
		}
-->casing2
		NextCh();
	}


-->comments

	protected void CheckLiteral() {
-->literals
	}

	protected Token NextToken() {
		while (ignore[ch]) NextCh();
-->scan1
		t = new Token();
		t.pos = pos; t.col = pos - lineStart + 1; t.line = line; 
		int state = start[ch];
		tlen = 0; AddCh();
		
		switch (state) {
			case -1: { t.kind = eofSym; break; } // NextCh already done
			case 0: { t.kind = noSym; break; }   // NextCh already done
-->scan2
		}
		t.val = new String(tval, 0, tlen);
		return t;
	}
	
	// get the next token (possibly a token already seen during peeking)
	public Token Scan () {
		if (tokens.next == null) {
			return NextToken();
		} else {
			pt = tokens = tokens.next;
			return tokens;
		}
	}

	// peek for the next token, ignore pragmas
	public Token Peek () {
		if (pt.next == null) {
			do {
				pt = pt.next = NextToken();
			} while (pt.kind > maxT); // skip pragmas
		} else {
			do {
				pt = pt.next;
			} while (pt.kind > maxT);
		}
		return pt;
	}
	
	// make sure that peeking starts at the current scan position
	public void ResetPeek () { pt = tokens; }

} // end Scanner

$$$