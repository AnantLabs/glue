#summary Creating a simple data model with Glue.Data.

= Glue.Data =

Glue.Data is Glue's data access layer. It helps you to map your .Net classes to your SQL data tables.

===With Glue.Data you can:===
 * Map .Net classes to SQL database tables
 * Can save, delete, list and search stored objects in a database independent way
 * Still allows you to execute SQL commands directly

===What Glue.Data does not do:===
 * Glue.Data does not create or alter the database schema

In part one of this howto you will use Glue.Data to store and retrieve the messages in a simple asp.net blogging application. In later parts, you will use Glue's form processing and Model/View/Controller classes.

= Web application setup =

Setup your asp.net web application with a single Default.aspx page.

{{{
    /App_Data
    /bin
        glue.data.dll
        glue.lib.dll
        System.Data.SQLite.dll
    Default.aspx
    Default.aspx.cs
    Web.config
}}}

= The data model =

Glue supports most SQL variants like MSSQL, MySQL and Oracle. In this howto we will use SQLite because is it easier to install on most systems, but you can use any database for which a DataProvider exists. They are listed on the [http://www.glueproject.com/api/html/T_Glue_Data_BaseDataProvider.htm DataProvider] page.

Create a 'Message' class to use on your blog. To make it Glue.Data enabled, add the [Table] attribute.

{{{ 
using System;
using Glue.Data;
using Glue.Data.Mapping;

/// <summary>
/// A Blog message
/// </summary>
[Table]
public class Message
{
    [AutoKey]
    public int Id;

    [Column(MaxLength = 10000)]
    public string Content;

    [Column(MaxLength = 100)]
    public string Author;

    public DateTime Published;

    public Message()
    {
        Published = DateTime.Now;
    }
}
}}}

Glue uses the attributes in [http://www.glueproject.com/api/html/N_Glue_Data_Mapping.htm Glue.Data.Mapping] to map your classes. It will map all public members unless they have an `[Exclude`] attribute. If the name of a database column is different than your class member, use the `[Column(Name="SomeOtherName")`] attribute. For all attributes, see the [http://www.glueproject.com/api/html/N_Glue_Data_Mapping.htm API]



Next, create the 'Message' table in your SQLite database. In this example we stored the database file (blog.db3) in the App_Data directory in the website root.

{{{
CREATE TABLE [Message] (
    [id] INTEGER PRIMARY KEY,
    [content] VARCHAR(10000),
    [author] VARCHAR(100),
    [published] DATETIME
);
}}}

{{{
using System;
using System.IO;
using Glue.Data;
using Glue.Data.Providers.SQLite;

namespace GlueBlog
{
    public partial class _Default : System.Web.UI.Page
    {
        public IDataProvider provider;

        protected void Page_Load(object sender, EventArgs e)
        {
            string dbPath = Server.MapPath("App_Data/blog.db3");
            provider = new SQLiteDataProvider(null, dbPath, null, null);

            // Initialise the blog with a welcome message.
            if (provider.Count<Message>(null) == 0)
            {
                Message m = new Message();
                m.Author = "Administrator";
                m.Content = "Welcome to my blog!";
                provider.Insert(m);
            }
        }
    }
}
}}}

{{{
<%@ Page Language="C#" CodeBehind="Default.aspx.cs" Inherits="GlueBlog._Default" %>
<html>
<head>
    <title>The Glue Blog</title>
</head>
<body>
    <div>
        <table>
            <tr>
                <th>id</th>
                <th>author</th>
                <th>message</th>
                <th>date</th>
            </tr>
            <% foreach (Message m in provider.List<Message>(null, null, null)) { %>
                <tr>
                    <td><%= m.Id %></td>
                    <td><%= m.Author %></td>
                    <td><%= m.Content %></td>
                    <td><%= m.Published %></td>
                </tr>
            <% } %>
        </table>
    </div>
</body>
</html>
}}}
_default.aspx_

{{{
<configSections>
    <section name="settings" type="Glue.Lib.Configuration,glue.lib" />
</configSections>

<settings>
    <!-- Dynamic compilation options -->
    <compilation>
        <assemblies>
            <add assembly="System.Data.SQLite" />
            <add assembly="Glue.Lib" />
            <add assembly="Glue.Data" />
            <add assembly="GlueBlog" />
        </assemblies>
        <imports>
        </imports>
    </compilation>
</settings>
}}}
_Web.config_